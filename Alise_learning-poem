import requests

YANDEX_STORAGE_TOKEN = "AQVNz5wvxjW_tklmjhE7U55wWpXW2_jz-h-zdi_o"
CLOUD_ID = "stihi"

def get_poem(poem_title):
    """
    Receives the text of the poem from Yandex.Cloud.

     :param poem_title: title of the poem
    :return: text of the poem or None if the poem is not found
    """
    # URL файла со стихотворением в Яндекс.Облаке
    url = f"https://storage.yandexcloud.net/{CLOUD_ID}/{poem_title}.txt"

    # Заголовки для запроса
    headers = {"Authorization": f"Bearer {YANDEX_STORAGE_TOKEN}"}

    # Отправляем GET-запрос к Яндекс.Облаку
    response = requests.get(url, headers=headers)

    # Если ответ успешный, возвращаем текст стихотворения
    if response.status_code == 200:
        response.encoding = "utf-8"
        return response.text.split("\n")
    else:
        return None


def welcome_message(event):
    """
    Returns a welcome message.

     :param event: event
     :return: response for the user
    """
    return {
        "version": "1.0",
        "session": event["session"],
        "response": {
            "text": "Привет, я помогаю учить стихи\nНазови стих, который тебе надо выучить.",
            "buttons": [],
            "end_session": False,
        },
    }


def handle_learning(session, event,response):
    """
    Handles the learning phase that the user is in.

     :param session: session attributes
    :param event: event
     :return: response for the user
    """
    # Checking if the training has started
    if session["learning_started"]:
        learning_output = session.get("learning_output", "")
        poem_text = get_poem(session["poem_title"])

        # If the learning phase is the full text
        if learning_output == "full_text":
            response = "\n".join(poem_text)
            session["learning_output"] = "repeat_line"

        # If the learning phase is the repetition of a string
        elif learning_output == "repeat_line":
            user_input = event["request"]["original_utterance"].strip().lower()
            correct_text = (
                poem_text[session["current_part"]]
                .strip()
                .lower()
                .replace(",", "")
                .replace(".", "")
                .replace("!", "")
                .replace("-", "")
            )
            # If the user's input matches the correct text
            if user_input == correct_text:
                session["current_part"] += 2
                # If the current part is greater than or equal to the length of the verse text
                if session["current_part"] >= len(poem_text):
                    session["learning_output"] = "full_text"
                    response = "Строки закончились."
                    should_end_session = True
                else:
                    response = "\n".join(
                        poem_text[session["current_part"] : session["current_part"] + 2]
                    )
                    should_end_session = False
            else:
                return {
                    "version": "1.0",
                    "session": event["session"],
                    "response": {
                        "text": "Пожалуйста, повторите строку правильно.",
                        "end_session": "false",
                    },
                    "session_state": {"session": session},
                }
            return response
        return {
            "version": "1.0",
            "session": event["session"],
            "response": {
                "text": poem_text,
                "buttons": [],
                "end_session": should_end_session,
            },
            "session_state": {"session": session},
        }

def handle_request(event):
    """
    Processes the user's request.

     :param event: event
     :return: response for the user
    """
    if "request" in event:
        # Check if the request is a SimpleUtterance and has original_utterance
        if (
            event["request"]["type"] == "SimpleUtterance"
            and "original_utterance" in event["request"]
            and len(event["request"]["original_utterance"]) > 0
        ):
            # Initialize a session dictionary to store state information
            session = {
                "current_part": 0,  # Current part of the poem being learned
                "poem_title": None,  # Title of the poem being learned
                "learning_started": False,  # Flag indicating whether learning has started
                "learning_output": "text",  # Output format for learning
            }

            # Get the title of the poem from the user's utterance
            poem_title = event["request"]["original_utterance"].lower()

            # Retrieve the poem text from the get_poem function
            poem_text = get_poem(poem_title)

            # Check if the poem text was found
            if poem_text is not None:
                # Set the poem title and learning flag
                session["poem_title"] = poem_title
                session["learning_started"] = True

                # Prepare the response
                response = {
                    "version": "1.0",  # Alexa API version
                    "session": session,  # Current session state
                    "response": {
                        "text": "\n".join(poem_text),  # Combine poem parts into a string
                        "buttons": [
                            {
                                # Button to start learning the poem
                                "title": "Начать учить стихотворение",
                                "payload": {"start_learning": True},
                            }
                        ],
                        "end_session": False,  # Don't end the conversation
                    },
                    "session_state": {"session": session},  # Store session state
                }

                return response

            else:
                # Poem not found, send error message
                response = {
                    "version": "1.0",
                    "session": event["session"],  # Current session
                    "response": {
                        "text": "Стихотворение \"%s\" не найдено."
                        % poem_title,  # Error message
                        "end_session": True,  # End the conversation
                    },
                    "session_state": {"session": session},  # Store session state
                }
                return response
    else:
        # If the request is not a SimpleUtterance, send a welcome message
        return welcome_message(event)


def handler(event, context):
    """
    Entry-point for Serverless Function.
    :param event: request payload.
    :param context: information about current execution context.
    :return: response to be serialized as JSON.
    """
    text = None
    if 'request' in event and \
            'original_utterance' in event['request'] \
            and len(event['request']['original_utterance']) > 0:
        text = event['request']['original_utterance']

    if text is None:
        # If this is the first message
        answer = welcome_message(event)
    else:
        # If this is the second message
        answer = handle_request(event)

    return answer
